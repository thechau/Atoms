//
//  SCNAssetImporterScene.swift
//  AssetImportKit
//
//  Created by Eugene Bokhan on 2/11/18.
//  Copyright © 2018 Eugene Bokhan. All rights reserved.
//

import SceneKit
import Assimp

/**
 A scene graph—a hierarchy of nodes with attached geometries, lights, cameras
 and other attributes that together form a displayable 3D scene.
 
 This scene graph is generated by parsing a scene graph that represents a file
 loaded with the assimp library.
 */
public class AssetImporterScene: SCNScene {
    
    // MARK: - SCNScene objects
    
    /**
     The scene representing the mdoel and the optional skeleton.
     */
    public var modelScene = SCNScene()
    
    /**
     The array of scenes where each scene is a skeletal animation.
     */
    public var animationScenes = NSMutableDictionary()
    
    // MARK: - Animation data
    
    /**
     The root of the skeleton.
     */
    public var skeletonNode = SCNNode()
    
    /**
     The dictionary of SCNAssimpAnimation objects, for each animation in the scene.
     */
    public var animations = NSMutableDictionary()
    
    // MARK: - Creating a new scene animation
    
    /**
     Creates a new scene animation, without any animation data.
     
     @return A new scene animation object.
     */
    public override init() {
        super.init()
    }
    
    required public init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - Add, fetch SCNAssimpAnimation animations
    
    
    /// Add, fetch SCNAssimpAnimation animations
    /// Return the SCNAssimpAnimation object for the specified animation key.
    ///
    /// - Parameters:
    ///     - assimpAnimation: scene to fetch animations from.
    ///     - animScene: scene to write animtaions to.
    func addAnimation(assimpAnimation: AssetImporterAnimation,
                      to animScene: SCNScene) {
        
        if let frameAnims = assimpAnimation.frameAnims {
            
            for nodeName in frameAnims.allKeys {
                
                if let nodeName = nodeName as? String {
                    
                    if let boneNode = animScene.rootNode.childNode(withName: nodeName, recursively: true) {
                        
                        if let channelKeys = frameAnims.value(forKey: nodeName) as? NSDictionary {
                            
                            let nodeKey = NSString(string: "/node-").appending(nodeName) as NSString
                            
                            if let posAnim = channelKeys.value(forKey: "position") as? CAKeyframeAnimation {
                                let posKey = nodeKey.appending(".transform.translation")
                                boneNode.addAnimation(posAnim, forKey: posKey)
                            }
                            
                            if let quatAnim = channelKeys.value(forKey: "orientation") as? CAKeyframeAnimation {
                                let quatKey = nodeKey.appending(".transform.quaternion")
                                boneNode.addAnimation(quatAnim, forKey: quatKey)
                            }
                            
                            if let scaleAnim = channelKeys.value(forKey: "scale") as? CAKeyframeAnimation {
                                let scaleKey = nodeKey.appending(".transform.scale")
                                boneNode.addAnimation(scaleAnim, forKey: scaleKey)
                            }

                        }
                        
                    }
                }
            }
        }
        
    }
    
    /// Return the SCNAssimpAnimation object for the specified animation key.
    ///
    /// - Parameter key: The unique scene animation key.
    /// - Returns: The scene animation object.
    public func animationForKey(_ key: String) -> AssetImporterAnimation? {
        return self.animations.value(forKey: key) as? AssetImporterAnimation
    }
    
    // MARK: - Add, fetch scene animations
    
    /// Return the keys for all the animations in this file.
    ///
    /// - Returns: The array of animation keys.
    public func animationKeys() -> [Any]? {
        return self.animationScenes.allKeys
    }
    
    /// Return the SCNScene object for the specified animation key.
    ///
    /// - Parameter key: The unique scene animation key.
    /// - Returns: The scene animation object.
    public func animationSceneForKey(_ key: String) -> SCNScene? {
        return self.animationScenes.value(forKey: key) as? SCNScene
    }
    
    // MARK: - Make SCNScene objects
    
    /// Makes the SCNScene representing the model and the optional skeleton.
    ///
    /// This transformation to SCNScene allows the client to use the existing SCNScene
    /// API. This also makes it trivial to support serialization using the existing
    /// SCNScene export API, thereby allowing easy integration in the XCode Scene
    /// editor and the asset pipeline.
    func makeModelScene() {
        for childNode in self.rootNode.childNodes {
            self.modelScene.rootNode.addChildNode(childNode)
        }
    }
    
    /// Makes an array of SCNScene objects, each SCNScene representing a skeletal
    /// animation.
    ///
    /// This transformation to SCNScene allows the client to use the existing SCNScene
    /// API. This also makes it trivial to support serialization using the existing
    /// SCNScene export API, thereby allowing easy integration in the XCode Scene
    /// editor and the asset pipeline.
    func makeAnimationScenes() {
        for animSceneKey in self.animations.allKeys {
            if let animSceneKey = animSceneKey as? String {
                if let assimpAnim = self.animations.value(forKey: animSceneKey) as? AssetImporterAnimation {
                    let animScene = SCNScene()
                    animScene.rootNode.addChildNode(skeletonNode.clone())
                    self.addAnimation(assimpAnimation: assimpAnim,
                                      to: animScene)
                    self.animationScenes.setValue(animScene,
                                                  forKey: animSceneKey)
                }
            }
        }
    }
}

